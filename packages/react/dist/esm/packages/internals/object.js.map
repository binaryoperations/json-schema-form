{"version":3,"file":"object.js","sources":["../../../../../internals/object.ts"],"sourcesContent":["import get from 'lodash/get';\nimport maxBy from 'lodash/maxBy';\nimport fpSet from 'lodash/fp/set';\nimport type _set from 'lodash/set';\nimport { extractSegmentsFromPath } from './extractSegmentsFromPath';\n\nexport { get, maxBy };\n\nexport const set: typeof _set = (data: object, path: string, value: any) => {\n  if (Object.is(get(data, path), value)) return data;\n  return fpSet(extractSegmentsFromPath(path), value, data);\n};\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: unknown, y: unknown) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / (y as number);\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nexport function shallowCompare(objA?: unknown, objB?: unknown) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !hasOwnProperty.call(objB, keysA[i]) ||\n      !is(\n        (objA as Record<string, unknown>)[keysA[i]],\n        (objB as Record<string, unknown>)[keysA[i]]\n      )\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default {\n  set,\n  shallowCompare,\n};\n"],"names":["set","data","path","value","get","fpSet","extractSegmentsFromPath","hasOwnProperty","is","x","y","shallowCompare","objA","objB","keysA","keysB","i"],"mappings":"myCAQO,MAAMA,EAAmB,CAACC,EAAcC,EAAcC,IACvD,OAAO,GAAGC,EAAIH,EAAMC,CAAI,EAAGC,CAAK,EAAUF,EACvCI,EAAMC,EAAwBJ,CAAI,EAAGC,EAAOF,CAAI,EAGnDM,EAAiB,OAAO,UAAU,eAMxC,SAASC,EAAGC,EAAYC,EAAY,CAElC,OAAID,IAAMC,EAGDD,IAAM,GAAK,EAAIA,IAAM,EAAKC,EAG1BD,IAAMA,GAAKC,IAAMA,CAE5B,CAOgB,SAAAC,EAAeC,EAAgBC,EAAgB,CACzD,GAAAL,EAAGI,EAAMC,CAAI,EACR,MAAA,GAIP,GAAA,OAAOD,GAAS,UAChBA,IAAS,MACT,OAAOC,GAAS,UAChBA,IAAS,KAEF,MAAA,GAGH,MAAAC,EAAQ,OAAO,KAAKF,CAAI,EACxBG,EAAQ,OAAO,KAAKF,CAAI,EAE1B,GAAAC,EAAM,SAAWC,EAAM,OAClB,MAAA,GAIT,QAASC,EAAI,EAAGA,EAAIF,EAAM,OAAQE,IAE9B,GAAA,CAACT,EAAe,KAAKM,EAAMC,EAAME,CAAC,CAAC,GACnC,CAACR,EACEI,EAAiCE,EAAME,CAAC,CAAC,EACzCH,EAAiCC,EAAME,CAAC,CAAC,CAAA,EAGrC,MAAA,GAIJ,MAAA,EACT"}