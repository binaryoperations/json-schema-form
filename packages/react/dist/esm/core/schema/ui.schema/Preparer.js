import orderBy from 'lodash/orderBy';
import { UiStore } from './UiStore';
export class UiSchemaPreparer {
    counter = 0;
    store;
    constructor(draftSchema) {
        this.store = new UiStore(draftSchema);
    }
    // reconsider:
    // Do I need to prepare the tree in ahead-of-time?
    // can the child nodes be derived just-in-time?
    traverse(uiSchema, idRoot) {
        const nextCount = ++this.counter;
        const id = idRoot + '/' + (uiSchema.id ?? nextCount);
        this.store.keyMap[id] = uiSchema;
        if (!('nodes' in uiSchema) || !uiSchema.nodes)
            return id;
        const treeNodes = [];
        const nodes = [uiSchema.nodes].flat().filter(Boolean);
        if (!Array.isArray(uiSchema.nodes)) {
            this.store.keyMap[id] = { ...uiSchema, nodes };
        }
        for (const nextUiSchema of nodes) {
            treeNodes.push(this.traverse(nextUiSchema, id));
        }
        this.store.tree[id] = orderBy(treeNodes, (nodeId) => this.store.keyMap[nodeId].id ?? 0, 'asc');
        return id;
    }
    static prepare(uiSchema, draftSchema) {
        const ClassConstructor = Object.assign(this);
        const parser = new ClassConstructor(draftSchema);
        const id = parser.traverse(uiSchema, 'root');
        parser.store.setRoot(id);
        const store = parser.store;
        return new Proxy(store, {
            get(target, key, receiver) {
                return Reflect.get(target, key, receiver);
            },
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJlcGFyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb3JlL3NjaGVtYS91aS5zY2hlbWEvUHJlcGFyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sZ0JBQWdCLENBQUM7QUFRckMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVwQyxNQUFNLE9BQU8sZ0JBQWdCO0lBQ25CLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFFcEIsS0FBSyxDQUFXO0lBRWhCLFlBQVksV0FBMEI7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsY0FBYztJQUNkLGtEQUFrRDtJQUNsRCwrQ0FBK0M7SUFDdkMsUUFBUSxDQUFDLFFBQXFDLEVBQUUsTUFBYztRQUNwRSxNQUFNLFNBQVMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDakMsTUFBTSxFQUFFLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLENBQUM7UUFFckQsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBRWpDLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFFekQsTUFBTSxTQUFTLEdBQWEsRUFBRSxDQUFDO1FBRS9CLE1BQU0sS0FBSyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQW1CLENBQUM7UUFFeEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBSSxRQUF1QixFQUFFLEtBQUssRUFBRSxDQUFDO1NBQ2hFO1FBRUQsS0FBSyxNQUFNLFlBQVksSUFBSSxLQUFLLEVBQUU7WUFDaEMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUMzQixTQUFTLEVBQ1QsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQzdDLEtBQUssQ0FDTixDQUFDO1FBRUYsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFzQixFQUFFLFdBQTBCO1FBQy9ELE1BQU0sZ0JBQWdCLEdBQTRCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVqRCxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU3QyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBRTNCLE9BQU8sSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQ3RCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVE7Z0JBQ3ZCLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzVDLENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YifQ==