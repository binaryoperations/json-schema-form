import { cast } from '../internals/cast';
import { get } from '../internals/object';
export const and = (...functions) => {
    return (...arg) => functions.every((func) => func(...arg));
};
export const or = (...functions) => {
    return (...arg) => functions.some((func) => func(...arg));
};
export const ranked = (...functions) => {
    return (...arg) => {
        let counter = 0;
        for (const nextFunc of functions) {
            const resolution = nextFunc(...arg);
            if (+resolution <= 0)
                return -1;
            counter += +resolution;
        }
        return counter;
    };
};
/**
 *
 * Ui Schema Tester
 */
export const uiSchemaMatches = (predicate) => {
    return (_, uiSchema) => predicate(uiSchema);
};
const isType = (type) => {
    return uiSchemaMatches((uiSchema) => uiSchema.type === type);
};
export const hasFieldSets = isType('fieldsets');
export const isFieldSet = isType('fieldset');
export const hasRows = isType('rows');
export const hasColumns = isType('columns');
export const isControl = isType('control');
export const optionIs = (property, expectedValue) => and(isControl, uiSchemaMatches((uiSchema) => get(cast(uiSchema).options, property) === expectedValue));
export const optionStartsWith = (property, expectedValue) => and(isControl, uiSchemaMatches((uiSchema) => {
    const value = get(cast(uiSchema).options, property);
    return typeof value === 'string' && value.startsWith(expectedValue);
}));
/**
 *
 * Schema Testers
 *
 */
/**
 *
 * @param schema {Schema}
 * @returns boolean
 */
export const checkInferableOneOfNotNullSchema = (tester) => (schema, ...rest) => {
    if (tester(schema, ...rest))
        return true;
    if (!Array.isArray(schema.oneOf))
        return false;
    const filteredSchema = schema.oneOf.filter((s) => s.type !== 'null');
    return filteredSchema.length === 1 && tester(filteredSchema[0], ...rest);
};
export const checkInferableAnyOfNotNullSchema = (tester) => (schema, ...rest) => {
    if (tester(schema, ...rest))
        return true;
    if (!Array.isArray(schema.anyOf))
        return false;
    const filteredSchema = schema.anyOf.filter((s) => s.type !== 'null');
    return filteredSchema.length === 1 && tester(filteredSchema[0], ...rest);
};
export const isStringSchema = checkInferableOneOfNotNullSchema(checkInferableAnyOfNotNullSchema((schema) => schema.type === 'string'));
export const isNumberSchema = checkInferableOneOfNotNullSchema(checkInferableAnyOfNotNullSchema((schema) => schema.type === 'number'));
export const isBooleanSchema = checkInferableOneOfNotNullSchema(checkInferableAnyOfNotNullSchema((schema) => schema.type === 'boolean'));
export const isNullSchema = checkInferableOneOfNotNullSchema(checkInferableAnyOfNotNullSchema((schema) => schema.type === 'null'));
export const isObjectSchema = checkInferableOneOfNotNullSchema(checkInferableAnyOfNotNullSchema((schema) => schema.type === 'object'));
export const isArraySchema = checkInferableOneOfNotNullSchema(checkInferableAnyOfNotNullSchema((schema) => schema.type === 'array'));
/**
 *
 * Option Testers
 *
 */
export const formatIs = (expectedValue) => {
    return (schema) => {
        return get(cast(schema), 'format') === expectedValue;
    };
};
/**
 *
 * Rank Testers
 *
 */
export const createRankedTester = (...testers) => ranked(isControl, ...testers);
export const isTextRanked = createRankedTester(isStringSchema);
export const isArrayRanked = createRankedTester(isArraySchema);
export const isBooleanRanked = createRankedTester(isBooleanSchema);
export const isNumberRanked = createRankedTester(isNumberSchema);
export const isDateRanked = ranked(isTextRanked, or(formatIs('date'), optionIs('format', 'date'), optionStartsWith('format', 'date')));
export const isTimeRanked = ranked(isTextRanked, or(formatIs('time'), optionIs('format', 'time')));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvcmUvdGVzdGVycy90ZXN0ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUE2QnpDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsU0FBbUIsRUFBVSxFQUFFO0lBQ3BELE9BQU8sQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM3RCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLFNBQW1CLEVBQVUsRUFBRTtJQUNuRCxPQUFPLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDNUQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxTQUE4QixFQUFVLEVBQUU7SUFDbEUsT0FBTyxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUU7UUFDaEIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBRWhCLEtBQUssTUFBTSxRQUFRLElBQUksU0FBUyxFQUFFO1lBQ2hDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQztnQkFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUN4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