{"version":3,"file":"useControl.js","sources":["../../../../../../core/hooks/useControl.ts"],"sourcesContent":["import type {\n  ControlNode,\n  ControlSchema,\n} from '@binaryoperations/json-forms-core/models';\nimport type { Selector } from '@binaryoperations/json-forms-core/types/reducers';\nimport { cast } from '@binaryoperations/json-forms-internals/cast';\nimport {\n  set,\n  shallowCompare,\n} from '@binaryoperations/json-forms-internals/object';\nimport resolvers from '@binaryoperations/json-forms-internals/resolvers';\nimport { useCallback } from 'react';\n\nimport { ControlContext } from '../context/ControlContext';\nimport {\n  useFormDataContext,\n  useStoreContextRef,\n} from '../context/FormDataContext';\nimport { useInvariantContext } from './useInvariantContext';\nimport { useStore } from './useStore';\n\nconst useInvariantControl = (message: string) =>\n  useInvariantContext(ControlContext, message);\n\n/**\n *\n * Read the UI node for the current control\n *\n */\nexport function useControl<SelectorOutput>(\n  selector: Selector<ControlNode, SelectorOutput>,\n  equalityCheck = Object.is\n) {\n  const currentControlId = useInvariantControl(\n    'useControl can only be called inside ControlContext'\n  );\n\n  return useStore((store) => {\n    return selector(\n      cast<ControlNode>(store.uiContext.getNode(currentControlId))\n    );\n  }, equalityCheck);\n}\n\n/**\n *\n * Read the schema of the control\n *\n */\nexport function useControlSchema<SelectorOutput>(\n  selector: Selector<ControlSchema, SelectorOutput>,\n  equalityCheck?: typeof Object.is\n) {\n  const currentControl = useInvariantControl(\n    'useControlSchema can only be called inside ControlContext'\n  );\n\n  return useStore((store) => {\n    return selector(\n      cast<ControlNode>(store.uiContext.getNode(currentControl)).schema\n    );\n  }, equalityCheck);\n}\n\n/**\n *\n * Read the schema of the control\n *\n */\nexport function useControlValue(path: string) {\n  const value = useFormDataContext(\n    (data) => resolvers.resolvePath(data, path),\n    shallowCompare\n  );\n\n  const store = useStoreContextRef();\n\n  return [\n    value,\n    useCallback(\n      (value: unknown) => {\n        store.set((oldValue) => {\n          return set(oldValue, path, value);\n        });\n      },\n      [path, store]\n    ),\n  ];\n}\n"],"names":["useInvariantControl","message","useInvariantContext","ControlContext","useControl","selector","equalityCheck","currentControlId","useStore","store","cast","useControlValue","path","value","useFormDataContext","data","resolvers","shallowCompare","useStoreContextRef","useCallback","oldValue","set"],"mappings":"gcAqBMA,EAAuBC,GAC3BC,EAAA,oBAAoBC,iBAAgBF,CAAO,EAOvC,SAAUG,EACdC,EACAC,EAAgB,OAAO,GAAE,CAEnB,MAAAC,EAAmBP,EACvB,qDAAqD,EAGhD,OAAAQ,EAAAA,SAAUC,GACRJ,EACLK,EAAAA,KAAkBD,EAAM,UAAU,QAAQF,CAAgB,CAAC,CAAC,EAE7DD,CAAa,CAClB,CA2BM,SAAUK,EAAgBC,EAAY,CACpC,MAAAC,EAAQC,qBACXC,GAASC,EAAU,YAAYD,EAAMH,CAAI,EAC1CK,EAAAA,cAAc,EAGVR,EAAQS,EAAAA,qBAEP,MAAA,CACLL,EACAM,EAAA,aAAA,YACGN,GAAkB,CACXJ,EAAA,IAAKW,GACFC,MAAID,EAAUR,EAAMC,CAAK,CACjC,CAAA,EAEH,CAACD,EAAMH,CAAK,CAAC,CAAA,CAGnB"}