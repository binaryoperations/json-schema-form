{"version":3,"file":"UiSchema.js","sources":["../../../../../../core/models/UiSchema.ts"],"sourcesContent":["import { ControlSchema } from './ControlSchema';\n\nexport enum UiNodeType {\n  FIELD_SETS = 'fieldsets',\n  FIELD_SET = 'fieldset',\n  ROWS = 'rows',\n  COLUMNS = 'columns',\n  CONTROL = 'control',\n}\n\n/**\n *\n * Rules\n */\nexport enum RuleEffect {\n  HIDE = 'hide',\n  SHOW = 'show',\n  ENABLED = 'enabled',\n  DISABLED = 'disabled',\n}\n\nexport enum RuleOperator {\n  OR = 'or',\n  AND = 'and',\n}\n\nexport type Condition = object;\n\ntype RuleSet = {\n  operator: RuleOperator;\n  conditions: Condition[];\n};\n\ntype Rules = RuleSet & {\n  effect: `${RuleEffect}`;\n};\n\n/**\n *\n * Children\n */\ntype ChildNode<T> = T & {\n  order?: number;\n};\n\n/**\n *\n * Available Ui Schemas\n *\n */\nexport interface UiNodeBase {\n  type: `${UiNodeType}`;\n  rules?: Rules;\n  id?: string;\n}\n\nexport interface FieldsetsNode extends UiNodeBase {\n  type: UiNodeType.FIELD_SETS;\n  nodes: ChildNode<FieldsetNode>[];\n}\n\nexport interface FieldsetNode extends UiNodeBase {\n  type: UiNodeType.FIELD_SET;\n  label?: string;\n  nodes: ChildNode<PossibleRootNodes>[];\n}\n\nexport interface RowsNode extends UiNodeBase {\n  type: UiNodeType.ROWS;\n  nodes: ChildNode<PossibleRootNodes>[];\n}\n\nexport interface ColumnsNode extends UiNodeBase {\n  type: UiNodeType.COLUMNS;\n  nodes: ChildNode<PossibleRootNodes>[];\n}\n\nexport interface ControlNode<T extends object = object> extends UiNodeBase {\n  type: UiNodeType.CONTROL;\n  schema: ControlSchema;\n  label?: string;\n  path: string;\n  options?: T;\n}\n\ntype PossibleRootNodes = FieldsetsNode | RowsNode | ColumnsNode | ControlNode;\n\nexport type UiSchema = PossibleRootNodes;\n"],"names":["UiNodeType"],"mappings":"gFAEY,IAAAA,GAAAA,IACVA,EAAA,WAAa,YACbA,EAAA,UAAY,WACZA,EAAA,KAAO,OACPA,EAAA,QAAU,UACVA,EAAA,QAAU,UALAA,IAAAA,GAAA,CAAA,CAAA"}